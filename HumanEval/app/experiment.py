import streamlit as st

from streamlit import session_state as state

from context_editor import ContextEditor
from decision_panel import DecisionPanel, init_state

from context_library import ContextLibraryUI
from streamlit_modal import Modal
from constants import total_runs
from context_library import get_final_context

def display_instructions():
    with st.container():
        st.markdown(
            """
            > Note: You are expected to complete the study in one sitting. Please do not close the browser tab or refresh the page during the study.
            """
        )
        st.markdown(
            """
            An ADR is a document that captures an architectural decision made along with its context and consequences.
            """
        )
        st.write("This is an example of an ADR:")
        st.text("\u00adContext: We need to decide on a database for our application.\n\u00adDecision: We will use PostgreSQL because it is open-source and has good community support.")
        st.markdown("[This](https://github.com/arachne-framework/architecture/blob/master/adr-007-configuration-updates.md) is another sample ADR. You can read more about ADRs [here](https://github.com/joelparkerhenderson/architecture-decision-record).")
        st.markdown(
            """
            In this study, you will be required to provide a context for a software system design problem. 
            * You can also use an existing context from the context library.
            * We will then generate two decisions for you to rate. Please rate each decision based on how well it addresses the context provided.
            * You can rate each decision on a scale of 1 to 5, where 1 is the lowest and 5 is the highest.
            * Provide additional **detailed feedback** about what you liked and disliked about the decision.
            * Once you have rated both decisions, click on the 'Submit ratings' button to submit your ratings.
            * Carefully check your ratings before submitting as you will not be able to change them later.

            Since the decisions are generated by language models, they might take some time to generate.
            Please be patient while the decisions are being generated.

            At the end of the study, you will be provided with a context and you will be asked to write a decision that you would make in that context.
            """
        )
        st.checkbox("I have read the instructions", key="user_instr")


def exp_main():
    init_state()
    st.markdown("# LLM4ADR")

    if not state.user_instr:
        display_instructions()
        st.error("Please read the instructions before proceeding")
        return

    runs_left = state.runs_left or 0
    if runs_left == 0:
        if state.custom_decision_saved:            
            st.success(
                "You have completed the study. Thank you for your participation. You may now close the tab.", icon="ðŸŽ‰"
            )
            return

        with st.expander("Instructions"):
            display_instructions()

        col1, col2 = st.columns([2, 3])
        with col1:
            state.context_input = get_final_context()
            state.generate_decision_clicked = True
            ContextEditor(button=False)
        with col2:
            ContextEditor(decision_writer=True)
        return

    context_lib, instr, runs_left = st.columns([2.5, 2.5, 0.5])
    with instr.expander("Instructions"):
        display_instructions()

    if not state.generate_decision_clicked:
        context_lib_modal = Modal(
            "Context Library",
            key="context-lib-modal"
        )
        if context_lib_modal.is_open():
            with context_lib_modal.container():
                ContextLibraryUI().display()

        context_lib_button = context_lib.button("Context Library")
        if context_lib_button:
            context_lib_modal.open()
        else:
            context_lib_modal.close(False)

    runs_left.markdown(
        "```Runs left: "+str(state.runs_left or 0) + f"/{total_runs}```")
    col1, col2 = st.columns([2, 3])
    with col1:
        ContextEditor()

    if state.generate_decision_clicked:
        with col2:
            DecisionPanel(col2)
