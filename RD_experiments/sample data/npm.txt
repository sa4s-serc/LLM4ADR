## Context\nYarn and NPM can both manage the Node packages for a project. Recent updates to NPM mean that Yarn only has a negligible performance advantage over NPM.\n

We will use `yarn`, `yarn start`, `yarn add`, `yarn remove` etc. for the management of Node packages in our project.\n



## Context\nWe're getting security vulnerabilty warnings from GitHub due to transitive dependencies. Npm offers a `--depth` setting for updating dependencies that yarn doesn't seem to have. Which raises the question: why use yarn?\n

Switch to npm.\n



## Context\nThere are lots of different tasks that need processed in order to get the prototype kit up and running. Tasks such as; installing dependencies, moving files from dependencies into the app file structure, and most importantly - running the application.\n

We will use a mixture on NPM scripts and [Gulp](https://gulpjs.com) to run our tasks. NPM scripts give us the core installation and start tasks as well as the ability to run Gulp tasks. Gulp, written in javascript, is very extensible and will allow us to have complete control over compilation and assembly of the applications assets.\n




## Context\nThe prototype kit will need a way to consume the dependencies it requires to run. These will include think like getting the correct version of `Express`, the framework that prototype kit app is built on, and pulling in the correct version of the NHSUK UI kit assets.\n

We will use NPM (Node Package Manager). Yarn, an alternative Node based package manager, when first released, had some benefits over NPM. These differences have now been implemented in the newer version NPM, Yarn and NPM are now interchangeable. The main benefit of NPM is that it comes packaged with Node.js and does not require an additional install like Yarn, removing a step from the setup process.\n



## Context\nWe needed to decide how best to create and enforce a uniform file structure for our separate directories containing\nreact applications. This also led to a discussion about whether we should use Yarn or NPM.\n

After discussion, it was determined that we would use [Create React App](https://github.com/facebook/create-react-app)\nto create a uniform project structure. With regard to Yarn vs. NPM, we concluded that using Yarn would introduce yet\nanother dependency and level of abstraction, and that it would not bring enough value to the project to justify those\ndrawbacks.\n



## Context\nNPM is causing confusion as to why lock files are changing in local\nenvironments when no changes have been made. We have found explanations and\nworkarounds, but it feels like the type of unexpected default behavior that will\nlead to frustration as new developers join the project.\nYarn is an alternative package manager that seems to have a more expected set\nof default behaviors while maintaining compatibility in case we need to revert.\n

We will use Yarn instead of NPM for this project.\n



## Context\nWe are using a mono-repository structure for the Datalabs project, this permits\nsharing of components across independent services. In NodeJS sharing of code\nwithout duplication requires linking of modules to the dependant service.\nThere are a few libraries to manages code-sharing:\n* NPM Link\n* Yarn Workspaces\n* Learna\n

We have decided to use Yarn Workspaces as is very lightweight and offers\nmanagement of the links required for module share, including auto discovery of\nother services.\nWe have ruled out using straight NPM Links as they are difficult to set-up and\nshare between development team. We have used Learna on other project and found\nit to be very heavyweight and requires that is adds git commits to releasing new\nversions.\n



## Context\nWe need to identify how and where we will store packages that describe our front end framework. There are a number of NHS UK and NHS Digital projects that already use NPM as their package repository for front end code.\n

We have chosen to store our packages on NPM.\n



## Context\nUsing Yarn Workspaces as decided in [ADR-0003](./0003-use-yarn-workspaces.md) turned out to be impractical and produced too many problems.\n

We're going to switch to [projen](https://github.com/projen/projen).\nRelated to that we're going to switch to npm 7 and drop yarn.\n



