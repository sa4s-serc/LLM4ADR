Context,Decision
"This is an Architectural Decision Record. Provide a Decision for the Context given below.Context\n=======\nAs part of our deployment we have a pipeline, where changes that are made can move from a development environment through to production illustrated thusly:\n![pipeline image](images/pipeline.jpg)\nThere are a number of externally available endpoints that are accessed to manage and view information about the platform, as well as issue commands via the Cloud Foundry API. In addition to this, a URL also needs to be available to access Apps hosted on the platform. These need to be accessed via some sort of sensible URL.\nThe reason for splitting system domains from app domains was to prevent applications from stealing traffic to CF components (for example, api.<domain>) or masquerading as official things of the platform (for example, signup.<domain>).\n### Naming considerations\nA number of aspects were considered as part of the naming process.\n* Clear sense of purpose\n* Clear distinction between Production and other Environments\n* No overly technical names (for example, hosting/paas/scalable-elastic-public-government-hosting)\n* Prevent possibility of domains suggesting 'live' service, for example if we allowed [app name].paas.gov.uk it could appear as thought they were live services.\nDecision\n========\nFor _non_ production environments we will be using the following domains:\n* [environment name].cloudpipeline.digital\n* [app name].[environment name].cloudpipelineapps.digital\nFor our production environment we will be using the following domains:\n* cloud.service.gov.uk\n* [app name].cloudapps.digital\nIt is important to note that live services will 'Bring Your Own' domain, apps available at cloudapps.digital are not live 'production' applications.\nDomain Overview\n===============\n### Development Domains\nPurpose | URL |\n------------ | -------------\nDeployer Concourse | deployer.foo.dev.cloudpipeline.digital\nCloud Foundry API | api.foo.dev.cloudpipeline.digital\nCloud Foundry User Account and Authentication | uaa.foo.dev.cloudpipeline.digital\nApplications | bar.foo.dev.cloudpipelineapps.digital\n### Continuous Integration (CI) Domains\nPurpose | URL |\n------------ | -------------\nDeployer Concourse | deployer.master.ci.cloudpipeline.digital\nCloud Foundry API | api.master.ci.cloudpipeline.digital\nCloud Foundry User Account and Authentication | uaa.master.ci.cloudpipeline.digital\nApplications | bar.master.ci.cloudpipelineapps.digital\n### Staging Domains\nPurpose | URL |\n------------ | -------------\nDeployer Concourse | deployer.staging.cloudpipeline.digital\nCloud Foundry API | api.staging.cloudpipeline.digital\nCloud Foundry User Account and Authentication | uaa.staging.cloudpipeline.digital\nApplications | bar.staging.cloudpipelineapps.digital\n### Production Domains\nPurpose | URL |\n------------ | -------------\nDeployer Concourse | deployer.cloud.service.gov.uk\nCloud Foundry API | api.cloud.service.gov.uk\nCloud Foundry User Account and Authentication | uaa.cloud.service.gov.uk\nApplications | bar.cloudapps.digital\nStatus\n======\nAccepted\nConsequences\n============\nCertificates etc. had to be purchased, domains registered, and our automated deployments configured to allow us to specify the domains for each stage of the pipeline.\n## Decision"
"This is an Architectural Decision Record. Provide a Decision for the Context given below.Context\n=======\nAmazon Web Services (AWS) are our current Infrastructure as a Service (IaaS)\nprovider. Our deployment tooling (Concourse, Terraform, BOSH, etc.) and\nCloud Foundry components (Cloud Controller, RDS broker, blobstore clients,\netc.) use the APIs to manage or access IaaS resources.\nThe most common mechanism for authenticating the API calls is to create an\nIdentify and Access Management (IAM) user with the appropriate permissions,\ngenerate an Access Key ID and Secret Access Key for that user, and export\nthose as environment variables. `AWS_ACCESS_KEY_ID` and\n`AWS_SECRET_ACCESS_KEY` are the standard environment variable names used by\nmost utilities and libraries.\nThe problem with this approach is that it's very easy to accidentally leak\nthe plain text keys. They can appear in output from your shell, which you\nmight copy+paste into a gist or email when debugging a problem. You might\nadd them to your shell configuration or include them in a script, which can\nbe pushed to a public code repository.\nOur team have leaked keys like this on more than one occasion. It's worth\nnoting that even if you realise that you've done this, delete the commit and\nrevoke the keys, they may have already been used maliciously because\nautomated bots monitor sites like GitHub using the [events firehose][] to\ndetect any credentials.\n[events firehose]: https://developer.github.com/v3/activity/events/\nAs an alternative to using pre-generated keys, AWS recommends that you use\n[IAM roles and instance profiles][] when accessing the API from EC2\ninstances. You delegate permissions to the EC2 instance and temporary\ncredentials are made available from the instance metadata service. Most\ntools and libraries automatically support this. The credentials are\nregularly rotated and never need to be stored in configuration files.\n[IAM roles and instance profiles]: http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#use-roles-with-ec2\nDecision\n========\nTo reduce the likelihood of us leaking AWS keys we will use IAM roles and\ninstance profiles for all operations that run from EC2 instances. This\nincludes everything that happens within Concourse and Cloud Foundry.\nTo reduce the impact of us leaking AWS keys we will use an IAM policy with\nan [`aws:SourceIp` condition][condition] to\nenforce that IAM accounts for team members are only used from the office IP\naddresses.\n[condition]: http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_examples.html#iam-policy-example-deny-source-ip-address\nThe IAM roles, profiles, and policies will be managed by our\n[aws-account-wide-terraform][] repo.\n[aws-account-wide-terraform]: https://github.gds/government-paas/aws-account-wide-terraform\nStatus\n======\nAccepted\nConsequences\n============\nWe'll still need to use AWS keys for operations that run outside of EC2.\nCare must be taken when storing and handling these credentials. These\noperations include:\n- Creation of Bootstrap Concourse instance\n- Running of `aws-account-wide-terraform`\nUsing IAM profiles has the drawback that any process running on the VM can\nget the same credentials. This model does not play well when it is required\nto assign the credentials to specific processes running in different containers\n(for example concourse, CF apps), as all the containers will have access to\nthe AWS IAM profile.\nWe'll need to maintain our own forks of some standard Concourse resources to\nadd support for IAM roles and instance profiles because the maintainers\ndon't wish to support this feature ([concourse/s3-resource/pull/22][]).\nThese resources include:\n[concourse/s3-resource/pull/22]: https://github.com/concourse/s3-resource/pull/22\n- [alphagov/paas-s3-resource](https://github.com/alphagov/paas-s3-resource)\n- [alphagov/paas-semver-resource](https://github.com/alphagov/paas-semver-resource)\nWe'll need to use the office VPN to administer AWS when outside of the\noffice. This matches what we have to do to administer Concourse or Cloud\nFoundry from outside the office. There are disaster recovery provisions for\nthe VPN if the office has connectivity problems.\n## Decision"
"This is an Architectural Decision Record. Provide a Decision for the Context given below.# Context and Problem Statement\nTo allow searching the documents contents efficiently, a separate\nindex is necessary. The defacto standard for fulltext search on the\nJVM is something backed by [Lucene](https://lucene.apache.org).\nAnother option is to use a RDBMS that supports fulltext search.\nThis adds another component to the mix, which increases the complexity\nof the setup and the software. Since docspell works great without this\nfeature, it shouldn't have a huge impact on the application, i.e. if\nthe fulltext search component is down or broken, docspell should still\nwork (just the fulltext search is then not working).\n# Considered Options\n* [Apache SOLR](https://solr.apache.org)\n* [ElasticSearch](https://www.elastic.co/elasticsearch/)\n* [PostgreSQL](https://www.postgresql.org/docs/12/textsearch.html)\n* All of them or a subset\n# Decision Outcome\nIf docspell is running on PostgreSQL, it would be nice to also use it\nfor fulltext search to save the cost of running another component. But\nI don't want to lock the database to PostgreSQL *only* because of the\nfulltext search feature.\nElasticSearch and Apache SOLR are quite similiar in features. SOLR is\npart of Lucene and therefore lives in the Apache ecosystem. I would\nchoose SOLR over ElasticSearch, because I used it before.\nThe last option (supporting all) is interesting, since it would enable\nto use PostgreSQL for fulltext search for those that use PostgreSQL as\nthe database for docspell.\nIn a first step, identify what docspell needs from a fulltext search\ncomponent and create this interface and an implementation for Apache\nSOLR. This enables all users to use the fulltext search feature. As a\nlater step, an implementation based on PostgreSQL and/or ElasticSearch\ncould be provided, too.\n## Decision"
"This is an Architectural Decision Record. Provide a Decision for the Context given below.## Context and Problem Statement\nIn the context of classic services' requirement for contact HMRC and Welsh information links in their footer, facing the\nfact that these links are missing from hmrcStandardFooter, should we add them?\nThe additional links needed are:\n* 'Contact', linking to https://www.gov.uk/government/organisations/hm-revenue-customs/contact\n* 'Rhestr o Wasanaethau Cymraeg', linking to https://www.gov.uk/cymraeg\n## Decision Drivers\n* The need for consistency across HMRC services.\n* Our belief that including them is likely to improve the user experience for tax users.\n* We can see no good reason for not including them as standard because they are applicable across HMRC services.\n* We have a time sensitive opportunity of acting now while teams are in the process of\nuplifting their frontend libraries.\n* The HMRC design community have been consulted on multiple public Slack channels and two\nsuccessive design system working group meetings, with no objections noted.\n* Classic services support multiple live services. Not including these links as standard would mean their having to\nduplicate these links, and associated English and Welsh content, across tens of repositories.\n## Decision"